# Log sequence recorded on 2023/11/21 18:41:48
import time
import zhinst.core

daq = zhinst.core.ziDAQServer('127.0.0.1', 8004, 6)
# Starting module scopeModule on 2023/11/21 18:41:48
scope = daq.scopeModule()
scope.set('lastreplace', 1)
scope.subscribe('/dev7173/scopes/0/wave')
scope.set('historylength', 100)
scope.set('averager/weight', 1)
scope.set('averager/restart', 0)
scope.set('averager/weight', 1)
scope.set('averager/restart', 0)
scope.set('fft/power', 0)
scope.unsubscribe('*')
scope.set('mode', 1)
scope.set('fft/spectraldensity', 0)
scope.set('fft/window', 1)
scope.set('save/directory', '/data/LabOne/WebServer')
scope.subscribe('/dev7173/scopes/0/wave')
scope.execute()
# To read the acquired data from the module, use a
# while loop like the one below. This will allow the
# data to be plotted while the measurement is ongoing.
# Note that any device nodes that enable the streaming
# of data to be acquired, must be set before the while loop.
# result = 0
# while not scope.finished():
#     time.sleep(1)
#     result = scope.read()
#     print(f"Progress {float(scope.progress()) * 100:.2f} %\r")
daq.setInt('/dev7173/scopes/0/enable', 1)
daq.setInt('/dev7173/scopes/0/time', 9)
# Starting module dataAcquisitionModule on 2023/11/21 18:45:57
daq_module = daq.dataAcquisitionModule()
daq_module.set('triggernode', '/dev7173/demods/0/sample.R')
daq_module.set('preview', 1)
daq_module.set('device', 'dev7173')
daq_module.set('historylength', 100)
daq_module.set('bandwidth', 0)
daq_module.set('hysteresis', 0.01)
daq_module.set('level', 0.1)
daq_module.set('save/directory', '/data/LabOne/WebServer')
daq_module.set('clearhistory', 1)
daq_module.set('clearhistory', 1)
daq_module.set('bandwidth', 0)
daq_module.set('endless', 1)
daq_module.subscribe('/dev7173/demods/0/sample.R.avg')
daq_module.execute()
# To read the acquired data from the module, use a
# while loop like the one below. This will allow the
# data to be plotted while the measurement is ongoing.
# Note that any device nodes that enable the streaming
# of data to be acquired, must be set before the while loop.
# result = 0
# while not daq_module.finished():
#     time.sleep(1)
#     result = daq_module.read()
#     print(f"Progress {float(daq_module.progress()) * 100:.2f} %\r")
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/scopes/0/enable', 0)
scope.finish()
scope.unsubscribe('*')
scope.subscribe('/dev7173/scopes/0/wave')
scope.unsubscribe('*')
scope.subscribe('/dev7173/scopes/0/wave')
scope.execute()
# To read the acquired data from the module, use a
# while loop like the one below. This will allow the
# data to be plotted while the measurement is ongoing.
# Note that any device nodes that enable the streaming
# of data to be acquired, must be set before the while loop.
# result = 0
# while not scope.finished():
#     time.sleep(1)
#     result = scope.read()
#     print(f"Progress {float(scope.progress()) * 100:.2f} %\r")
daq.setInt('/dev7173/scopes/0/enable', 1)
scope.set('mode', 3)
daq.setInt('/dev7173/scopes/0/time', 1)
daq.setInt('/dev7173/scopes/0/time', 15)
daq_module.set('forcetrigger', 1)
daq_module.set('historylength', 1)
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/sigins/0/autorange', 1)
daq.setInt('/dev7173/sigins/0/ac', 1)
daq.setInt('/dev7173/sigins/0/autorange', 1)
scope.set('mode', 1)
daq.setInt('/dev7173/extrefs/0/enable', 1)
daq.setInt('/dev7173/demods/1/adcselect', 8)
daq.setInt('/dev7173/scopes/0/enable', 0)
scope.finish()
scope.unsubscribe('*')
scope.subscribe('/dev7173/scopes/0/wave')
scope.unsubscribe('*')
scope.subscribe('/dev7173/scopes/0/wave')
scope.execute()
# To read the acquired data from the module, use a
# while loop like the one below. This will allow the
# data to be plotted while the measurement is ongoing.
# Note that any device nodes that enable the streaming
# of data to be acquired, must be set before the while loop.
# result = 0
# while not scope.finished():
#     time.sleep(1)
#     result = scope.read()
#     print(f"Progress {float(scope.progress()) * 100:.2f} %\r")
daq.setInt('/dev7173/scopes/0/enable', 1)
daq.setInt('/dev7173/scopes/0/time', 10)
daq.setInt('/dev7173/sigins/0/autorange', 1)
daq.setInt('/dev7173/sigins/0/autorange', 1)
daq.setInt('/dev7173/sigins/0/autorange', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/scopes/0/time', 9)
daq.setInt('/dev7173/scopes/0/time', 8)
daq.setInt('/dev7173/extrefs/0/enable', 0)
daq.setInt('/dev7173/demods/0/order', 8)
daq.setInt('/dev7173/demods/0/sinc', 1)
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/demods/0/order', 3)
daq.setInt('/dev7173/demods/0/sinc', 0)
daq.setInt('/dev7173/demods/0/sinc', 1)
daq.setInt('/dev7173/demods/0/order', 4)
daq.setInt('/dev7173/demods/0/order', 8)
daq.setInt('/dev7173/scopes/0/time', 0)
daq.setInt('/dev7173/sigins/0/autorange', 1)
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/demods/0/sinc', 0)
daq.setInt('/dev7173/demods/0/sinc', 1)
daq.setInt('/dev7173/demods/0/sinc', 0)
daq.setInt('/dev7173/demods/0/order', 3)
daq.setInt('/dev7173/demods/0/sinc', 1)
daq.setInt('/dev7173/demods/0/sinc', 0)
daq_module.set('forcetrigger', 1)
daq.setDouble('/dev7173/oscs/0/freq', 500000)
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/demods/1/adcselect', 1)
daq.setInt('/dev7173/demods/1/adcselect', 0)
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/demods/0/sinc', 1)
daq.setInt('/dev7173/extrefs/0/enable', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/demods/1/adcselect', 8)
daq.setInt('/dev7173/scopes/0/enable', 0)
scope.finish()
scope.unsubscribe('*')
scope.subscribe('/dev7173/scopes/0/wave')
scope.unsubscribe('*')
scope.subscribe('/dev7173/scopes/0/wave')
scope.execute()
# To read the acquired data from the module, use a
# while loop like the one below. This will allow the
# data to be plotted while the measurement is ongoing.
# Note that any device nodes that enable the streaming
# of data to be acquired, must be set before the while loop.
# result = 0
# while not scope.finished():
#     time.sleep(1)
#     result = scope.read()
#     print(f"Progress {float(scope.progress()) * 100:.2f} %\r")
daq.setInt('/dev7173/scopes/0/enable', 1)
daq.setInt('/dev7173/demods/1/adcselect', 0)
daq.setInt('/dev7173/demods/1/adcselect', 8)
daq.setInt('/dev7173/extrefs/0/enable', 0)
daq.setDouble('/dev7173/oscs/0/freq', 600000)
daq.setDouble('/dev7173/oscs/0/freq', 600000)
daq.setInt('/dev7173/system/extclk', 1)
daq.setInt('/dev7173/system/extclk', 1)
daq.setInt('/dev7173/system/extclk', 1)
daq.setInt('/dev7173/system/extclk', 1)
daq.setInt('/dev7173/system/extclk', 1)
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/demods/0/sinc', 0)
daq.setInt('/dev7173/demods/0/sinc', 1)
daq.setInt('/dev7173/sigins/0/autorange', 1)
daq.setInt('/dev7173/demods/0/order', 4)
daq.setInt('/dev7173/demods/0/order', 8)
daq.setInt('/dev7173/demods/0/order', 3)
daq.setInt('/dev7173/demods/0/sinc', 0)
daq.setInt('/dev7173/sigins/0/ac', 0)
daq.setInt('/dev7173/sigins/0/ac', 1)
daq.setInt('/dev7173/demods/0/sinc', 1)
daq.setInt('/dev7173/extrefs/0/enable', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/demods/0/order', 8)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/demods/0/order', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/demods/0/order', 2)
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/demods/0/order', 5)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/demods/0/order', 8)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq_module.set('forcetrigger', 1)
daq.setInt('/dev7173/demods/0/order', 2)
daq_module.set('forcetrigger', 1)
